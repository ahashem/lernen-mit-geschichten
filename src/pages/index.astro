---
import BaseLayout from '../layouts/BaseLayout.astro';
import StoryCard from '../components/StoryCard.astro';
import SearchBar from '../components/SearchBar.astro';
import FilterSidebar from '../components/FilterSidebar.astro';
import { getCollection } from 'astro:content';

const locale = 'de';
const stories = await getCollection('stories', ({ id }) => id.startsWith('de/'));
const description = "Entdecke spannende Geschichten, die Kindern wichtige Werte und Fähigkeiten vermitteln. Für Eltern, Lehrer und Erzieher.";

// Get filter params from URL
const urlSkills = Astro.url.searchParams.get('skills')?.split(',').filter(Boolean) || [];
const urlLanguages = Astro.url.searchParams.get('languages')?.split(',').filter(Boolean) || [];
---

<BaseLayout title="Startseite" locale={locale} description={description}>
  <div class="container">
    <section class="hero">
      <h1>Willkommen bei Lernen mit Geschichten</h1>
      <p class="hero-text">
        Entdecke spannende Geschichten, die Kindern wichtige Werte und Fähigkeiten vermitteln.
        Für Eltern, Lehrer und Erzieher.
      </p>
    </section>

    <SearchBar locale={locale} />

    <div class="content-wrapper">
      <FilterSidebar locale={locale} currentSkills={urlSkills} currentLanguages={urlLanguages} />

      <section class="stories-section">
        <h2>Alle Geschichten</h2>

      {stories.length === 0 ? (
        <div class="no-stories">
          <p>Noch keine Geschichten verfügbar. Bald kommen die ersten Geschichten!</p>
        </div>
      ) : (
        <div class="stories-grid">
          {stories.map(story => (
            <StoryCard
              title={story.data.title}
              emoji={story.data.emoji}
              skills={story.data.skills}
              languages={story.data.languages}
              storyId={story.data.storyId}
              estimatedReadTime={story.data.estimatedReadTime}
              locale={locale}
              slug={story.slug.replace('de/', '')}
              isInteractive={story.data.storyFormat === 'interactive'}
              provider={story.data.provider}
              providerUrl={story.data.providerUrl}
              publishDate={story.data.publishDate}
            />
          ))}
        </div>
      )}
      </section>
    </div>
  </div>
</BaseLayout>

<script>
  // Client-side filtering and search
  window.addEventListener('DOMContentLoaded', () => {
    const storiesGrid = document.querySelector('.stories-grid');
    if (!storiesGrid) return;

    const storyCards = Array.from(storiesGrid.querySelectorAll('.story-card'));

    const filterStories = () => {
      const searchQuery = localStorage.getItem('search-query') || '';
      const selectedSkills = JSON.parse(localStorage.getItem('filters-skills') || '[]');
      const selectedLanguages = JSON.parse(localStorage.getItem('filters-languages') || '[]');

      storyCards.forEach(card => {
        const cardEl = card as HTMLElement;
        const title = cardEl.querySelector('.story-title')?.textContent?.toLowerCase() || '';
        const storySkills = JSON.parse(cardEl.getAttribute('data-skills') || '[]');
        const storyLanguages = JSON.parse(cardEl.getAttribute('data-languages') || '[]');

        // Search filter
        const matchesSearch = !searchQuery || title.includes(searchQuery.toLowerCase());

        // Skills filter (OR logic within skills)
        const matchesSkills = selectedSkills.length === 0 ||
          selectedSkills.some((skill: string) => storySkills.includes(skill));

        // Languages filter (OR logic within languages)
        const matchesLanguages = selectedLanguages.length === 0 ||
          selectedLanguages.some((lang: string) => storyLanguages.includes(lang));

        // Show/hide card (AND logic between filter types)
        if (matchesSearch && matchesSkills && matchesLanguages) {
          cardEl.style.display = '';
        } else {
          cardEl.style.display = 'none';
        }
      });
    };

    window.addEventListener('searchChanged', filterStories);
    window.addEventListener('filtersChanged', filterStories);

    // Initial filter
    filterStories();
  });
</script>

<style>
  .hero {
    text-align: center;
    padding: 3rem 0;
    max-width: 800px;
    margin: 0 auto;
  }

  .hero h1 {
    font-size: 2.5rem;
    color: var(--color-primary);
    margin-bottom: 1rem;
  }

  .hero-text {
    font-size: 1.25rem;
    color: var(--color-text-light);
    line-height: 1.6;
  }

  .content-wrapper {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 2rem;
    margin-top: 2rem;
  }

  .stories-section {
    min-width: 0;
  }

  .stories-section h2 {
    margin-bottom: 2rem;
    color: var(--color-text);
  }

  .stories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .no-stories {
    text-align: center;
    padding: 3rem;
    background: white;
    border-radius: var(--border-radius);
    color: var(--color-text-light);
  }

  @media (max-width: 768px) {
    .hero h1 {
      font-size: 2rem;
    }

    .hero-text {
      font-size: 1.1rem;
    }

    .content-wrapper {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .stories-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
  }
</style>
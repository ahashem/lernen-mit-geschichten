---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import QuizInteractive, { type QuizQuestion } from '../../components/QuizInteractive.astro';
import InteractiveStorybook from '../../components/InteractiveStorybook.astro';
import StoryLanguageSelector from '../../components/StoryLanguageSelector.astro';
import BilingualView from '../../components/BilingualView.astro';
import ReadingControls from '../../components/ReadingControls.astro';
import type { Locale } from '../../utils/i18n';
import { getTranslation } from '../../utils/i18n';
import { getSkillsByIds } from '../../utils/skills-taxonomy';

export async function getStaticPaths() {
  const stories = await getCollection('stories');
  const paths = [];

  // Generate regular story pages (German only - others handled by [locale]/stories/[...slug].astro)
  stories
    .filter(story => story.slug.startsWith('de/'))
    .forEach(story => {
      const slug = story.slug.replace(/^de\//, '');
      paths.push({
        params: { slug },
        props: { story, storyLocale: 'de', bilingualSecondLang: null },
      });
    });

  // Generate bilingual routes for common combinations (primary-de pairs)
  const commonPairs = ['ar-de', 'en-de', 'tr-de', 'ur-de', 'de-en', 'de-ar'];

  stories.forEach(primaryStory => {
    const primarySlug = primaryStory.slug.replace(/^[a-z]{2}\//, '');
    const primaryLang = primaryStory.slug.match(/^([a-z]{2})\//)?.[1] || 'de';
    const storyId = primaryStory.data.storyId;

    // Find all other language versions of this story
    const otherVersions = stories.filter(
      s => s.data.storyId === storyId && s.slug.replace(/^[a-z]{2}\//, '') === primarySlug
    );

    otherVersions.forEach(secondaryStory => {
      const secondaryLang = secondaryStory.slug.match(/^([a-z]{2})\//)?.[1] || 'de';
      const pairKey = `${primaryLang}-${secondaryLang}`;

      // Only generate routes for common pairs and avoid same-language pairs
      if (primaryLang !== secondaryLang && commonPairs.includes(pairKey)) {
        paths.push({
          params: { slug: `${primarySlug}-${primaryLang}-${secondaryLang}` },
          props: {
            story: primaryStory,
            storyLocale: primaryLang,
            bilingualSecondLang: secondaryLang,
          },
        });
      }
    });
  });

  return paths;
}

interface Props {
  story: CollectionEntry<'stories'>;
  storyLocale: string;
  bilingualSecondLang: string | null;
}

const { story, storyLocale, bilingualSecondLang } = Astro.props;
const { Content } = await story.render();

// Get UI language from URL or use story locale as fallback
const uiLocale: Locale = (Astro.url.searchParams.get('ui') || storyLocale) as Locale;
const locale: Locale = storyLocale as Locale;

const skillObjects = getSkillsByIds(story.data.skills);

// Generate meta description from story
const metaDescription = `${story.data.title} - Eine Geschichte für Kinder über ${skillObjects
  .slice(0, 2)
  .map(s => s[locale])
  .join(' und ')}. Für Kinder im Alter von ${story.data.ageGroup} Jahren.`;

// Check if both standard and interactive versions exist
const allStories = await getCollection('stories');
const baseStoryId = story.data.storyId.replace(/-interactive$/, '');
const alternativeFormat = story.data.storyFormat === 'interactive' ? 'standard' : 'interactive';
const alternativeStory = allStories.find(
  s =>
    s.data.storyId.replace(/-interactive$/, '') === baseStoryId &&
    s.data.storyFormat === alternativeFormat
);
const hasAlternativeFormat = !!alternativeStory;

// Find all language versions of this story
const availableLanguages = allStories
  .filter(s => s.data.storyId === story.data.storyId)
  .map(s => {
    const lang = s.slug.match(/^([a-z]{2})\//)?.[1] || 'de';
    const slug = s.slug.replace(/^[a-z]{2}\//, '');
    return { locale: lang as Locale, slug };
  });

// Extract slug without locale prefix for current story
const currentStorySlug = story.slug.replace(/^[a-z]{2}\//, '');

// Find if bilingual mode is requested (from static route or query param)
const bilingualWith = bilingualSecondLang || Astro.url.searchParams.get('bilingual');
const bilingualMode = bilingualWith && availableLanguages.some(l => l.locale === bilingualWith);
let bilingualStory: CollectionEntry<'stories'> | null = null;
let BilingualContent: any = null;
if (bilingualMode) {
  bilingualStory =
    allStories.find(
      s => s.data.storyId === story.data.storyId && s.slug.startsWith(bilingualWith + '/')
    ) || null;
  if (bilingualStory) {
    const rendered = await bilingualStory.render();
    BilingualContent = rendered.Content;
  }
}

// Sample quiz questions - will be in frontmatter later
const quizQuestions: QuizQuestion[] = [
  {
    id: 'q1',
    text: 'Bruno ist ein kleiner Hund.',
    type: 'truefalse',
    correctAnswer: 'false',
  },
  {
    id: 'q2',
    text: 'Bruno liebt Honig.',
    type: 'truefalse',
    correctAnswer: 'true',
  },
  {
    id: 'q3',
    text: 'Wie heißt Brunos Freundin?',
    type: 'multiplechoice',
    options: ['Lina', 'Mila', 'Nina'],
    correctAnswer: 'Mila',
  },
  {
    id: 'q4',
    text: 'Bruno ist ein kleiner ________.',
    type: 'fillinblank',
    correctAnswer: ['Bär', 'baer'],
  },
];
---

<BaseLayout title={story.data.title} locale={uiLocale} description={metaDescription} type="article">
  <article class="story-detail">
    <div class="container">
      <header class="story-header">
        <div class="emoji-large">{story.data.emoji}</div>
        <h1>{story.data.title}</h1>

        <div class="story-meta">
          <div class="skills-list">
            {skillObjects.map(skill => <span class="skill-badge">{skill[locale]}</span>)}
          </div>

          {
            story.data.estimatedReadTime && (
              <div class="read-time">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                  <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm0 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1zm.5 2.5v4.793l2.854 2.853-.708.708-3-3A.5.5 0 0 1 7.5 8.5v-5h1z" />
                </svg>
                <span>
                  {story.data.estimatedReadTime} {getTranslation(uiLocale, 'minutesRead')}
                </span>
              </div>
            )
          }

          <div class="age-group">
            <span>{getTranslation(uiLocale, 'ageGroup')}: {story.data.ageGroup}</span>
          </div>
        </div>
      </header>

      {
        hasAlternativeFormat && (
          <div class="format-selector">
            <div class="format-toggle">
              <a
                href={
                  story.data.storyFormat === 'interactive'
                    ? `/stories/${baseStoryId}`
                    : `/stories/${baseStoryId}-interactive`
                }
                class={`format-option ${story.data.storyFormat === 'standard' ? 'active' : ''}`}
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M2 3a1 1 0 011-1h14a1 1 0 011 1v14a1 1 0 01-1 1H3a1 1 0 01-1-1V3zm2 1v12h12V4H4zm2 3h8v1H6V7zm0 3h8v1H6v-1z" />
                </svg>
                <span>{getTranslation(uiLocale, 'textFormat')}</span>
              </a>
              <a
                href={
                  story.data.storyFormat === 'standard'
                    ? `/stories/${baseStoryId}-interactive`
                    : `/stories/${baseStoryId}`
                }
                class={`format-option ${story.data.storyFormat === 'interactive' ? 'active' : ''}`}
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10 2a8 8 0 100 16 8 8 0 000-16zm-1 11V7l4 3-4 3z" />
                </svg>
                <span>{getTranslation(uiLocale, 'interactiveFormat')}</span>
              </a>
            </div>
          </div>
        )
      }

      <StoryLanguageSelector
        availableLanguages={availableLanguages}
        currentLocale={locale}
        currentSlug={currentStorySlug}
        storyId={story.data.storyId}
      />

      {
        bilingualMode && bilingualStory && BilingualContent ? (
          <BilingualView
            primaryStory={story}
            primaryContent={Content}
            primaryLocale={locale}
            secondaryStory={bilingualStory}
            secondaryContent={BilingualContent}
            secondaryLocale={bilingualWith as Locale}
          />
        ) : story.data.storyFormat === 'interactive' && story.data.pages ? (
          <InteractiveStorybook
            pages={story.data.pages}
            storyId={story.data.storyId}
            locale={locale}
            title={story.data.title}
          />
        ) : (
          <>
            <div class="story-content">
              <Content />
            </div>
            <ReadingControls
              locale={locale}
              storyId={story.data.storyId}
              availableLanguages={availableLanguages}
              currentSlug={currentStorySlug}
              showBilingualToggle={availableLanguages.length >= 2}
            />
          </>
        )
      }

      {
        story.data.storyId === '001-bruno' && story.data.storyFormat !== 'interactive' && (
          <section class="activities-section">
            <h2>{getTranslation(uiLocale, 'activities')}</h2>

            <QuizInteractive
              questions={quizQuestions}
              language={locale}
              storyId={story.data.storyId}
              title={getTranslation(uiLocale, 'trueFalse')}
            />
          </section>
        )
      }

      <footer class="story-footer">
        <div class="footer-actions">
          <button
            class="export-booklet-btn"
            data-story-title={story.data.title}
            data-locale={locale}
          >
            📖 {getTranslation(uiLocale, 'exportBooklet')}
          </button>
          <a href={`${import.meta.env.BASE_URL}/`} class="back-link">← {getTranslation(uiLocale, 'allStories')}</a>
        </div>
      </footer>
    </div>
  </article>
</BaseLayout>

<script>
  import {
    exportAsBooklet,
    showExportProgress,
    hideExportProgress,
    detectOrientation,
  } from '../../utils/booklet-export';

  document.querySelectorAll('.export-booklet-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const storyTitle = button.getAttribute('data-story-title') || 'Story';
      const locale = button.getAttribute('data-locale') || 'de';

      // Get the story content element
      const storyContent = document.querySelector('.story-content') as HTMLElement;
      if (!storyContent) {
        alert('Story content not found');
        return;
      }

      // Detect orientation
      const orientation = detectOrientation(storyContent);

      // Show loading
      const translations = {
        de: 'Heft wird erstellt... Bitte warten.',
        ar: 'جاري إنشاء الكتيب... يرجى الانتظار.',
        en: 'Creating booklet... Please wait.',
        tr: 'Kitapçık oluşturuluyor... Lütfen bekleyin.',
        ur: 'کتابچہ بنایا جا رہا ہے... براہ کرم انتظار کریں۔',
      };
      const overlay = showExportProgress(
        translations[locale as keyof typeof translations] || translations.en
      );

      try {
        // Export with proper settings
        await exportAsBooklet(storyContent, {
          orientation,
          pageSize: 'a5',
          title: storyTitle,
          addCover: true,
          addPageNumbers: true,
        });

        hideExportProgress(overlay);

        // Success message
        const successTranslations = {
          de: 'Heft erfolgreich erstellt!',
          ar: 'تم إنشاء الكتيب بنجاح!',
          en: 'Booklet created successfully!',
          tr: 'Kitapçık başarıyla oluşturuldu!',
          ur: 'کتابچہ کامیابی سے بنایا گیا!',
        };
        alert(
          successTranslations[locale as keyof typeof successTranslations] || successTranslations.en
        );
      } catch (error) {
        hideExportProgress(overlay);
        console.error('Booklet export failed:', error);
        alert('Export failed. Please try again.');
      }
    });
  });
</script>

<style>
  .story-detail {
    max-width: 900px;
    margin: 0 auto;
  }

  .story-header {
    text-align: center;
    padding: 1rem 0;
    border-bottom: 2px solid #ffd93d;
    margin-bottom: 1.5rem;
  }

  .emoji-large {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }

  .story-header h1 {
    color: var(--color-primary);
    font-size: 1.75rem;
    margin-bottom: 0.75rem;
  }

  .story-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    justify-content: center;
    align-items: center;
    margin-top: 0.5rem;
  }

  .skills-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }

  .skill-badge {
    display: inline-block;
    padding: 0.5rem 1rem;
    background: var(--color-secondary);
    color: var(--color-text);
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .read-time,
  .age-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--color-text-light);
    font-size: 0.9rem;
  }

  .story-content {
    background: white;
    padding: 3rem;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 3rem;
  }

  .story-content :global(h2) {
    color: var(--color-primary);
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-size: 1.75rem;
  }

  .story-content :global(h3) {
    color: var(--color-text);
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .story-content :global(p) {
    line-height: 1.8;
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }

  .story-content :global(ul) {
    padding-left: 2rem;
    margin-bottom: 1.5rem;
  }

  .story-content :global(li) {
    margin-bottom: 0.75rem;
    line-height: 1.6;
    font-size: 1.05rem;
  }

  .activities-section {
    margin-bottom: 3rem;
  }

  .activities-section h2 {
    color: var(--color-primary);
    margin-bottom: 1.5rem;
    font-size: 2rem;
  }

  .format-selector {
    margin: 2rem 0;
    display: flex;
    justify-content: center;
  }

  .format-toggle {
    display: inline-flex;
    background: white;
    border-radius: 12px;
    padding: 0.5rem;
    gap: 0.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .format-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    color: var(--color-text);
    font-weight: 500;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .format-option:hover {
    background: #f8f8f8;
  }

  .format-option.active {
    background: var(--color-primary);
    color: white;
  }

  .format-option svg {
    flex-shrink: 0;
  }

  .story-footer {
    padding: 2rem 0;
    text-align: center;
  }

  .footer-actions {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .export-booklet-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-size: 1rem;
    cursor: pointer;
    transition: var(--transition);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .export-booklet-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
  }

  .export-booklet-btn:active {
    transform: translateY(0);
  }

  .back-link {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background: var(--color-primary);
    color: white;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: var(--transition);
  }

  .back-link:hover {
    background: #e88f30;
    transform: translateY(-2px);
  }

  @media (max-width: 768px) {
    .emoji-large {
      font-size: 4rem;
    }

    .story-header h1 {
      font-size: 2rem;
    }

    .story-content {
      padding: 2rem 1.5rem;
    }

    .story-content :global(p),
    .story-content :global(li) {
      font-size: 1rem;
    }

    .story-meta {
      flex-direction: column;
      gap: 0.75rem;
    }
  }

  /* Print Styles - Booklet Mode */
  @media print {
    /* Hide non-printable elements */
    nav,
    .back-link,
    .activities-section,
    .story-footer,
    .interactive-storybook {
      display: none !important;
    }

    /* Reset layout for print */
    .story-detail {
      max-width: 100%;
      margin: 0;
    }

    .container {
      max-width: 100%;
      padding: 0;
    }

    .story-header {
      border-bottom: 2px solid #333;
      padding: 1rem 0;
      margin-bottom: 1.5rem;
      page-break-after: avoid;
    }

    .story-header h1 {
      font-size: 1.8rem;
      color: #000;
    }

    .emoji-large {
      font-size: 3rem;
    }

    .story-content {
      background: none;
      box-shadow: none;
      padding: 0;
      color: #000;
    }

    .story-content :global(h2) {
      color: #000;
      font-size: 1.3rem;
      margin-top: 1.5rem;
      page-break-after: avoid;
    }

    .story-content :global(p) {
      line-height: 1.6;
      font-size: 11pt;
      orphans: 3;
      widows: 3;
    }

    .story-content :global(ul),
    .story-content :global(ol) {
      page-break-inside: avoid;
    }

    /* Booklet mode - prepare for duplex printing */
    @page {
      size: A5;
      margin: 15mm 10mm;
    }

    /* For booklet: left pages (even) have wider right margin */
    @page :left {
      margin-right: 20mm;
      margin-left: 10mm;
    }

    /* For booklet: right pages (odd) have wider left margin */
    @page :right {
      margin-left: 20mm;
      margin-right: 10mm;
    }

    /* RTL support for Arabic/Urdu booklets */
    [dir='rtl'] .story-content {
      direction: rtl;
      text-align: right;
    }

    /* Add page numbers */
    .story-content::after {
      content: counter(page);
      position: fixed;
      bottom: 10mm;
      font-size: 9pt;
      color: #666;
    }

    [dir='ltr'] .story-content::after {
      right: 10mm;
    }

    [dir='rtl'] .story-content::after {
      left: 10mm;
    }

    /* Note: RTL booklet margins are handled by the direction attribute */
    /* Browsers automatically flip page margins for RTL content */

    /* Ensure images don't break across pages */
    img {
      max-width: 100%;
      page-break-inside: avoid;
    }

    /* Keep skill badges visible but simplified */
    .skill-badge {
      background: #f0f0f0;
      color: #000;
      border: 1px solid #ddd;
      padding: 0.25rem 0.5rem;
      font-size: 8pt;
    }
  }
</style>

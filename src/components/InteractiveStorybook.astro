---
import type { Locale } from '../utils/i18n';
import { getTranslation } from '../utils/i18n';

export interface StoryPage {
  text: string;
  image?: string;
}

interface Props {
  pages: StoryPage[];
  storyId: string;
  locale: Locale;
  title: string;
}

const { pages, storyId, locale, title } = Astro.props;

// Translations
const t = {
  autoPlay: getTranslation(locale, 'autoPlay'),
  volume: getTranslation(locale, 'volume'),
  speed: getTranslation(locale, 'speed'),
  print: getTranslation(locale, 'print'),
};
---

<div class="interactive-storybook" data-story-id={storyId} data-locale={locale}>
  <h2 class="story-title">{title}</h2>

  <div class="swiper storybook-swiper">
    <div class="swiper-wrapper">
      {
        pages.map((page, index) => (
          <div class="swiper-slide">
            <div class="story-page">
              {page.image && (
                <div class="page-image">
                  <img src={page.image} alt={`Page ${index + 1}`} loading="lazy" />
                </div>
              )}
              <div class="page-text" data-page={index}>
                {page.text}
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <div class="swiper-pagination"></div>
    <div class="swiper-button-prev">‚Üê</div>
    <div class="swiper-button-next">‚Üí</div>
  </div>

  <!-- Floating Control Island -->
  <div class="control-island">
    <div class="control-island-content">
      <!-- Primary Controls -->
      <div class="primary-controls">
        <button class="control-btn play-pause" data-action="play" aria-label="Play/Pause">
          <span class="icon">‚ñ∂Ô∏è</span>
        </button>

        <button
          class="control-btn auto-play"
          data-enabled="false"
          aria-label="Auto-play"
          title={t.autoPlay}
        >
          <span class="icon">üîÑ</span>
        </button>

        <div class="page-indicator">
          <span class="current-page">1</span>
          <span class="separator">/</span>
          <span class="total-pages">{pages.length}</span>
        </div>
      </div>

      <!-- Expandable Settings -->
      <button class="control-btn settings-toggle" aria-label="Settings">
        <span class="icon">‚öôÔ∏è</span>
      </button>
    </div>

    <!-- Settings Panel (Hidden by default) -->
    <div class="settings-panel" hidden>
      <div class="setting-row">
        <label class="setting-label">
          <span class="icon">üîä</span>
          <span class="text">{t.volume}</span>
        </label>
        <input
          type="range"
          class="volume-slider"
          min="0"
          max="100"
          value="80"
          aria-label={t.volume}
        />
        <span class="value-display">80%</span>
      </div>

      <div class="setting-row">
        <label class="setting-label">
          <span class="icon">‚è±Ô∏è</span>
          <span class="text">{t.speed}</span>
        </label>
        <select class="speed-select" aria-label={t.speed}>
          <option value="0.75">0.75x</option>
          <option value="0.85" selected>0.85x</option>
          <option value="1.0">1.0x</option>
          <option value="1.2">1.2x</option>
        </select>
      </div>

      <div class="setting-row action-row">
        <button class="action-btn print-btn" aria-label={t.print}>
          <span class="icon">üñ®Ô∏è</span>
          <span class="text">{t.print}</span>
        </button>
      </div>

      <div class="setting-row action-row">
        <button
          class="action-btn export-booklet-interactive"
          data-story-title={title}
          data-locale={locale}
        >
          <span class="icon">üìñ</span>
          <span class="text">{getTranslation(locale, 'exportBooklet')}</span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import Swiper from 'swiper';
  import { Navigation, Pagination, EffectCreative, Keyboard } from 'swiper/modules';
  import 'swiper/css';
  import 'swiper/css/navigation';
  import 'swiper/css/pagination';
  import { StoryNarrator, getTTSLocale } from '../utils/text-to-speech';

  document.querySelectorAll('.interactive-storybook').forEach(storybookEl => {
    const storyId = storybookEl.getAttribute('data-story-id');
    const locale = storybookEl.getAttribute('data-locale') || 'de';
    const ttsLocale = getTTSLocale(locale);

    const narrator = new StoryNarrator(ttsLocale);
    let autoPlayEnabled = false;
    let currentRate = 0.85;
    let currentVolume = 0.8;

    const swiper = new Swiper('.storybook-swiper', {
      modules: [Navigation, Pagination, EffectCreative, Keyboard],
      effect: 'creative',
      creativeEffect: {
        prev: {
          translate: ['-100%', 0, -400],
          rotate: [0, 0, -15],
        },
        next: {
          translate: ['100%', 0, -400],
          rotate: [0, 0, 15],
        },
      },
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      pagination: {
        el: '.swiper-pagination',
        type: 'progressbar',
      },
      keyboard: {
        enabled: true,
      },
      grabCursor: true,
      on: {
        slideChange: function () {
          updatePageIndicator();
          if (autoPlayEnabled) {
            setTimeout(() => readCurrentPage(), 300);
          }
        },
      },
    });

    const playPauseBtn = storybookEl.querySelector('.play-pause');
    const autoPlayBtn = storybookEl.querySelector('.auto-play');
    const volumeSlider = storybookEl.querySelector('.volume-slider') as HTMLInputElement;
    const speedSelect = storybookEl.querySelector('.speed-select') as HTMLSelectElement;
    const currentPageEl = storybookEl.querySelector('.current-page');
    const settingsToggle = storybookEl.querySelector('.settings-toggle');
    const settingsPanel = storybookEl.querySelector('.settings-panel') as HTMLElement;
    const valueDisplay = storybookEl.querySelector('.value-display');

    function updatePageIndicator() {
      if (currentPageEl) {
        currentPageEl.textContent = (swiper.activeIndex + 1).toString();
      }
    }

    function readCurrentPage() {
      const currentSlide = swiper.slides[swiper.activeIndex];
      const pageText = currentSlide.querySelector('.page-text');
      if (!pageText) return;

      const text = pageText.textContent?.trim() || '';

      // Remove previous highlights
      pageText.querySelectorAll('.word').forEach(el => {
        const textNode = document.createTextNode(el.textContent || '');
        el.replaceWith(textNode);
      });

      // Split text into words for highlighting, preserving spaces
      const words = text.split(/(\s+)/);
      pageText.innerHTML = '';
      words.forEach((word, index) => {
        if (word.trim()) {
          const span = document.createElement('span');
          span.className = 'word';
          span.textContent = word;
          pageText.appendChild(span);

          // Add space after word (except for last word)
          if (index < words.length - 1 && !words[index + 1]?.trim()) {
            pageText.appendChild(document.createTextNode(' '));
          }
        }
      });

      let currentWordIndex = 0;
      const wordElements = pageText.querySelectorAll('.word');

      narrator.speak(text, {
        rate: currentRate,
        volume: currentVolume,
        onWordHighlight: word => {
          // Highlight current word
          wordElements.forEach(el => el.classList.remove('highlight'));
          if (wordElements[currentWordIndex]) {
            wordElements[currentWordIndex].classList.add('highlight');
            currentWordIndex++;
          }
        },
        onEnd: () => {
          // Clear highlights
          wordElements.forEach(el => el.classList.remove('highlight'));

          if (autoPlayEnabled && swiper.activeIndex < swiper.slides.length - 1) {
            setTimeout(() => {
              swiper.slideNext();
            }, 1000);
          } else {
            updatePlayPauseButton(false);
          }
        },
        onStart: () => {
          updatePlayPauseButton(true);
        },
      });
    }

    function updatePlayPauseButton(isPlaying: boolean) {
      if (!playPauseBtn) return;

      const icon = playPauseBtn.querySelector('.icon');
      const label = playPauseBtn.querySelector('.label');

      if (isPlaying) {
        playPauseBtn.setAttribute('data-action', 'pause');
        if (icon) icon.textContent = '‚è∏Ô∏è';
        if (label)
          label.textContent =
            locale === 'de'
              ? 'Pause'
              : locale === 'ar'
                ? 'ÿ•ŸäŸÇÿßŸÅ'
                : locale === 'en'
                  ? 'Pause'
                  : locale === 'tr'
                    ? 'Duraklat'
                    : 'ÿ±Ÿà⁄©€å⁄∫';
      } else {
        playPauseBtn.setAttribute('data-action', 'play');
        if (icon) icon.textContent = '‚ñ∂Ô∏è';
        if (label)
          label.textContent =
            locale === 'de'
              ? 'Vorlesen'
              : locale === 'ar'
                ? 'ÿßŸÇÿ±ÿ£'
                : locale === 'en'
                  ? 'Read Aloud'
                  : locale === 'tr'
                    ? 'Oku'
                    : 'Ÿæ⁄ë⁄æ€å⁄∫';
      }
    }

    // Event Listeners
    playPauseBtn?.addEventListener('click', () => {
      const action = playPauseBtn.getAttribute('data-action');

      if (action === 'play') {
        readCurrentPage();
      } else {
        narrator.stop();
        updatePlayPauseButton(false);
      }
    });

    autoPlayBtn?.addEventListener('click', () => {
      autoPlayEnabled = !autoPlayEnabled;
      autoPlayBtn.setAttribute('data-enabled', autoPlayEnabled.toString());

      const icon = autoPlayBtn.querySelector('.icon');
      if (icon) {
        icon.textContent = autoPlayEnabled ? '‚è∏Ô∏è' : 'üîÑ';
      }

      if (autoPlayEnabled) {
        readCurrentPage();
      }
    });

    volumeSlider?.addEventListener('input', e => {
      currentVolume = parseInt((e.target as HTMLInputElement).value) / 100;
      if (valueDisplay) {
        valueDisplay.textContent = `${(e.target as HTMLInputElement).value}%`;
      }
    });

    // Print button
    const printBtn = storybookEl.querySelector('.print-btn');
    printBtn?.addEventListener('click', () => {
      window.print();
    });

    // Export booklet button (for interactive stories)
    const exportBookletBtn = storybookEl.querySelector('.export-booklet-interactive');
    if (exportBookletBtn) {
      exportBookletBtn.addEventListener('click', async () => {
        // Dynamically import the export utility
        const { exportAsBooklet, showExportProgress, hideExportProgress, detectOrientation } =
          await import('../utils/booklet-export');

        const storyTitle = exportBookletBtn.getAttribute('data-story-title') || 'Story';
        const btnLocale = exportBookletBtn.getAttribute('data-locale') || 'de';

        // For interactive stories, we need to capture the storybook container
        const storybookContainer = exportBookletBtn.closest(
          '.interactive-storybook'
        ) as HTMLElement;
        if (!storybookContainer) {
          alert('Story content not found');
          return;
        }

        // Detect orientation
        const orientation = detectOrientation(storybookContainer);

        // Show loading
        const translations = {
          de: 'Heft wird erstellt... Bitte warten.',
          ar: 'ÿ¨ÿßÿ±Ÿä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÉÿ™Ÿäÿ®... Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±.',
          en: 'Creating booklet... Please wait.',
          tr: 'Kitap√ßƒ±k olu≈üturuluyor... L√ºtfen bekleyin.',
          ur: '⁄©ÿ™ÿßÿ®⁄Ü€Å ÿ®ŸÜÿß€åÿß ÿ¨ÿß ÿ±€Åÿß €Å€í... ÿ®ÿ±ÿß€Å ⁄©ÿ±ŸÖ ÿßŸÜÿ™ÿ∏ÿßÿ± ⁄©ÿ±€å⁄∫€î',
        };
        const overlay = showExportProgress(
          translations[btnLocale as keyof typeof translations] || translations.en
        );

        try {
          // Export with proper settings
          await exportAsBooklet(storybookContainer, {
            orientation,
            pageSize: 'a5',
            title: storyTitle,
            addCover: true,
            addPageNumbers: true,
          });

          hideExportProgress(overlay);

          // Success message
          const successTranslations = {
            de: 'Heft erfolgreich erstellt!',
            ar: 'ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÉÿ™Ÿäÿ® ÿ®ŸÜÿ¨ÿßÿ≠!',
            en: 'Booklet created successfully!',
            tr: 'Kitap√ßƒ±k ba≈üarƒ±yla olu≈üturuldu!',
            ur: '⁄©ÿ™ÿßÿ®⁄Ü€Å ⁄©ÿßŸÖ€åÿßÿ®€å ÿ≥€í ÿ®ŸÜÿß€åÿß ⁄Ø€åÿß!',
          };
          alert(
            successTranslations[btnLocale as keyof typeof successTranslations] ||
              successTranslations.en
          );
        } catch (error) {
          hideExportProgress(overlay);
          console.error('Booklet export failed:', error);
          alert('Export failed. Please try again.');
        }
      });
    }

    // Settings toggle
    settingsToggle?.addEventListener('click', () => {
      if (settingsPanel) {
        const isHidden = settingsPanel.hasAttribute('hidden');
        if (isHidden) {
          settingsPanel.removeAttribute('hidden');
          settingsToggle.setAttribute('aria-expanded', 'true');
        } else {
          settingsPanel.setAttribute('hidden', '');
          settingsToggle.setAttribute('aria-expanded', 'false');
        }
      }
    });

    speedSelect?.addEventListener('change', e => {
      currentRate = parseFloat((e.target as HTMLSelectElement).value);
    });

    // Save progress to localStorage
    swiper.on('slideChange', () => {
      if (storyId) {
        localStorage.setItem(`story-progress-${storyId}`, swiper.activeIndex.toString());
      }
    });

    // Load saved progress
    if (storyId) {
      const saved = localStorage.getItem(`story-progress-${storyId}`);
      if (saved) {
        swiper.slideTo(parseInt(saved, 10), 0);
      }
    }

    updatePageIndicator();
  });
</script>

<style>
  .interactive-storybook {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .story-title {
    text-align: center;
    color: var(--color-primary);
    margin-bottom: 3rem;
    font-size: 2.5rem;
  }

  .storybook-swiper {
    background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
    border-radius: 20px;
    padding: 3rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    margin-bottom: 2rem;
  }

  .story-page {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
    min-height: 500px;
    display: flex;
    flex-direction: column;
  }

  .page-image {
    width: 100%;
    height: 350px;
    overflow: hidden;
    background: linear-gradient(135deg, #f0f0f0 0%, #e0e0e0 100%);
    flex-shrink: 0;
  }

  .page-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background-size: contain;
  }

  .page-text {
    padding: 3rem 2.5rem;
    font-size: 1.4rem;
    line-height: 2;
    color: var(--color-text);
    text-align: center;
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    word-spacing: 0.15em;
  }

  .page-text .word {
    display: inline;
    transition: all 0.2s ease;
    padding: 3px 2px;
    border-radius: 4px;
    margin-right: 0.15em;
  }

  .page-text .word.highlight {
    background: var(--color-secondary);
    font-weight: 600;
    transform: scale(1.05);
    box-shadow: 0 2px 4px rgba(255, 217, 61, 0.4);
  }

  .swiper-button-prev,
  .swiper-button-next {
    color: var(--color-primary);
    font-size: 2rem;
    font-weight: bold;
    width: 50px;
    height: 50px;
    background: white;
    border-radius: 50%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .swiper-button-prev::after,
  .swiper-button-next::after {
    content: none;
  }

  .swiper-pagination {
    bottom: 0;
  }

  /* Floating Control Island */
  .control-island {
    position: sticky;
    bottom: 20px;
    margin: 2rem auto 1rem;
    max-width: fit-content;
    z-index: 100;
  }

  .control-island-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1.25rem;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 50px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .primary-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .control-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    border: none;
    background: transparent;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.3rem;
    transition: all 0.2s ease;
  }

  .control-btn:hover {
    background: rgba(247, 151, 49, 0.1);
    transform: scale(1.1);
  }

  .control-btn:active {
    transform: scale(0.95);
  }

  .control-btn .icon {
    line-height: 1;
  }

  .play-pause[data-action='pause'] .icon {
    content: '‚è∏Ô∏è';
  }

  .auto-play[data-enabled='true'] {
    background: rgba(247, 151, 49, 0.2);
  }

  .page-indicator {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0 0.75rem;
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--color-text);
    border-left: 1px solid rgba(0, 0, 0, 0.1);
    border-right: 1px solid rgba(0, 0, 0, 0.1);
    margin: 0 0.5rem;
  }

  .separator {
    opacity: 0.5;
  }

  .current-page {
    color: var(--color-primary);
  }

  /* Settings Panel */
  .settings-panel {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 10px;
    padding: 1rem 1.5rem;
    background: white;
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    min-width: 280px;
    animation: slideUp 0.2s ease;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }

  .settings-panel[hidden] {
    display: none;
  }

  .setting-row {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .setting-row:last-child {
    margin-bottom: 0;
  }

  .action-row {
    padding-top: 0.5rem;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    width: 100%;
    justify-content: center;
  }

  .action-btn:hover {
    background: #e88f30;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .action-btn:active {
    transform: translateY(0);
  }

  .action-btn .icon {
    font-size: 1.1rem;
  }

  .setting-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    min-width: 80px;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .setting-label .icon {
    font-size: 1.1rem;
  }

  .volume-slider {
    flex: 1;
    height: 6px;
    -webkit-appearance: none;
    appearance: none;
    background: #ddd;
    border-radius: 3px;
    outline: none;
    cursor: pointer;
  }

  .volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    background: var(--color-primary);
    border-radius: 50%;
    cursor: pointer;
  }

  .volume-slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: var(--color-primary);
    border-radius: 50%;
    cursor: pointer;
    border: none;
  }

  .value-display {
    min-width: 45px;
    text-align: right;
    font-size: 0.85rem;
    color: var(--color-text-light);
  }

  .speed-select {
    padding: 0.4rem 0.6rem;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 0.85rem;
    cursor: pointer;
    background: white;
  }

  @media (max-width: 768px) {
    .interactive-storybook {
      padding: 1rem 0.5rem;
    }

    .story-title {
      font-size: 1.8rem;
      margin-bottom: 2rem;
    }

    .storybook-swiper {
      padding: 1.5rem;
      border-radius: 16px;
    }

    .story-page {
      min-height: 450px;
    }

    .page-image {
      height: 250px;
    }

    .page-text {
      padding: 2rem 1.5rem;
      font-size: 1.2rem;
      line-height: 1.8;
    }

    .page-text .word {
      margin-right: 0.1em;
    }

    .control-island-content {
      padding: 0.6rem 1rem;
      gap: 0.5rem;
    }

    .control-btn {
      width: 40px;
      height: 40px;
      font-size: 1.1rem;
    }

    .page-indicator {
      font-size: 0.85rem;
      padding: 0 0.5rem;
      margin: 0 0.25rem;
    }

    .settings-panel {
      min-width: 260px;
    }

    .audio-controls {
      flex-direction: column;
      gap: 0.75rem;
    }

    .btn {
      width: 100%;
      justify-content: center;
    }

    .volume-control,
    .speed-control {
      width: 100%;
      justify-content: space-between;
    }

    .volume-slider {
      flex: 1;
    }
  }
</style>
